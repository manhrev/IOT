// Code generated by entc, DO NOT EDIT.

package data

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/manhrev/IOT/server/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v int64) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// RecordedAt applies equality check predicate on the "recorded_at" field. It's identical to RecordedAtEQ.
func RecordedAt(v time.Time) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordedAt), v))
	})
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v int64) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v int64) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldData), v))
	})
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...int64) predicate.Data {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Data(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldData), v...))
	})
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...int64) predicate.Data {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Data(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldData), v...))
	})
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v int64) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldData), v))
	})
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v int64) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldData), v))
	})
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v int64) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldData), v))
	})
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v int64) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldData), v))
	})
}

// RecordedAtEQ applies the EQ predicate on the "recorded_at" field.
func RecordedAtEQ(v time.Time) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordedAt), v))
	})
}

// RecordedAtNEQ applies the NEQ predicate on the "recorded_at" field.
func RecordedAtNEQ(v time.Time) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecordedAt), v))
	})
}

// RecordedAtIn applies the In predicate on the "recorded_at" field.
func RecordedAtIn(vs ...time.Time) predicate.Data {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Data(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecordedAt), v...))
	})
}

// RecordedAtNotIn applies the NotIn predicate on the "recorded_at" field.
func RecordedAtNotIn(vs ...time.Time) predicate.Data {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Data(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecordedAt), v...))
	})
}

// RecordedAtGT applies the GT predicate on the "recorded_at" field.
func RecordedAtGT(v time.Time) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecordedAt), v))
	})
}

// RecordedAtGTE applies the GTE predicate on the "recorded_at" field.
func RecordedAtGTE(v time.Time) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecordedAt), v))
	})
}

// RecordedAtLT applies the LT predicate on the "recorded_at" field.
func RecordedAtLT(v time.Time) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecordedAt), v))
	})
}

// RecordedAtLTE applies the LTE predicate on the "recorded_at" field.
func RecordedAtLTE(v time.Time) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecordedAt), v))
	})
}

// HasFeed applies the HasEdge predicate on the "feed" edge.
func HasFeed() predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FeedTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FeedTable, FeedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeedWith applies the HasEdge predicate on the "feed" edge with a given conditions (other predicates).
func HasFeedWith(preds ...predicate.Feed) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FeedInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FeedTable, FeedColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Data) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Data) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Data) predicate.Data {
	return predicate.Data(func(s *sql.Selector) {
		p(s.Not())
	})
}

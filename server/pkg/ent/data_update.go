// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/IOT/server/pkg/ent/data"
	"github.com/manhrev/IOT/server/pkg/ent/feed"
	"github.com/manhrev/IOT/server/pkg/ent/predicate"
)

// DataUpdate is the builder for updating Data entities.
type DataUpdate struct {
	config
	hooks    []Hook
	mutation *DataMutation
}

// Where appends a list predicates to the DataUpdate builder.
func (du *DataUpdate) Where(ps ...predicate.Data) *DataUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetData sets the "data" field.
func (du *DataUpdate) SetData(i int64) *DataUpdate {
	du.mutation.ResetData()
	du.mutation.SetData(i)
	return du
}

// AddData adds i to the "data" field.
func (du *DataUpdate) AddData(i int64) *DataUpdate {
	du.mutation.AddData(i)
	return du
}

// SetRecordedAt sets the "recorded_at" field.
func (du *DataUpdate) SetRecordedAt(t time.Time) *DataUpdate {
	du.mutation.SetRecordedAt(t)
	return du
}

// SetNillableRecordedAt sets the "recorded_at" field if the given value is not nil.
func (du *DataUpdate) SetNillableRecordedAt(t *time.Time) *DataUpdate {
	if t != nil {
		du.SetRecordedAt(*t)
	}
	return du
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (du *DataUpdate) SetFeedID(id int) *DataUpdate {
	du.mutation.SetFeedID(id)
	return du
}

// SetNillableFeedID sets the "feed" edge to the Feed entity by ID if the given value is not nil.
func (du *DataUpdate) SetNillableFeedID(id *int) *DataUpdate {
	if id != nil {
		du = du.SetFeedID(*id)
	}
	return du
}

// SetFeed sets the "feed" edge to the Feed entity.
func (du *DataUpdate) SetFeed(f *Feed) *DataUpdate {
	return du.SetFeedID(f.ID)
}

// Mutation returns the DataMutation object of the builder.
func (du *DataUpdate) Mutation() *DataMutation {
	return du.mutation
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (du *DataUpdate) ClearFeed() *DataUpdate {
	du.mutation.ClearFeed()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DataUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DataUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DataUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   data.Table,
			Columns: data.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: data.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Data(); ok {
		_spec.SetField(data.FieldData, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedData(); ok {
		_spec.AddField(data.FieldData, field.TypeInt64, value)
	}
	if value, ok := du.mutation.RecordedAt(); ok {
		_spec.SetField(data.FieldRecordedAt, field.TypeTime, value)
	}
	if du.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   data.FeedTable,
			Columns: []string{data.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   data.FeedTable,
			Columns: []string{data.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{data.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DataUpdateOne is the builder for updating a single Data entity.
type DataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DataMutation
}

// SetData sets the "data" field.
func (duo *DataUpdateOne) SetData(i int64) *DataUpdateOne {
	duo.mutation.ResetData()
	duo.mutation.SetData(i)
	return duo
}

// AddData adds i to the "data" field.
func (duo *DataUpdateOne) AddData(i int64) *DataUpdateOne {
	duo.mutation.AddData(i)
	return duo
}

// SetRecordedAt sets the "recorded_at" field.
func (duo *DataUpdateOne) SetRecordedAt(t time.Time) *DataUpdateOne {
	duo.mutation.SetRecordedAt(t)
	return duo
}

// SetNillableRecordedAt sets the "recorded_at" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableRecordedAt(t *time.Time) *DataUpdateOne {
	if t != nil {
		duo.SetRecordedAt(*t)
	}
	return duo
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (duo *DataUpdateOne) SetFeedID(id int) *DataUpdateOne {
	duo.mutation.SetFeedID(id)
	return duo
}

// SetNillableFeedID sets the "feed" edge to the Feed entity by ID if the given value is not nil.
func (duo *DataUpdateOne) SetNillableFeedID(id *int) *DataUpdateOne {
	if id != nil {
		duo = duo.SetFeedID(*id)
	}
	return duo
}

// SetFeed sets the "feed" edge to the Feed entity.
func (duo *DataUpdateOne) SetFeed(f *Feed) *DataUpdateOne {
	return duo.SetFeedID(f.ID)
}

// Mutation returns the DataMutation object of the builder.
func (duo *DataUpdateOne) Mutation() *DataMutation {
	return duo.mutation
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (duo *DataUpdateOne) ClearFeed() *DataUpdateOne {
	duo.mutation.ClearFeed()
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DataUpdateOne) Select(field string, fields ...string) *DataUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Data entity.
func (duo *DataUpdateOne) Save(ctx context.Context) (*Data, error) {
	var (
		err  error
		node *Data
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Data)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DataMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DataUpdateOne) SaveX(ctx context.Context) *Data {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DataUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DataUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DataUpdateOne) sqlSave(ctx context.Context) (_node *Data, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   data.Table,
			Columns: data.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: data.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Data.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, data.FieldID)
		for _, f := range fields {
			if !data.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != data.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Data(); ok {
		_spec.SetField(data.FieldData, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedData(); ok {
		_spec.AddField(data.FieldData, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.RecordedAt(); ok {
		_spec.SetField(data.FieldRecordedAt, field.TypeTime, value)
	}
	if duo.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   data.FeedTable,
			Columns: []string{data.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   data.FeedTable,
			Columns: []string{data.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Data{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{data.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

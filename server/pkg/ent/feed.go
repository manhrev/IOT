// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/IOT/server/pkg/ent/feed"
)

// Feed is the model entity for the Feed schema.
type Feed struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FeedName holds the value of the "feed_name" field.
	FeedName string `json:"feed_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedQuery when eager-loading is set.
	Edges FeedEdges `json:"edges"`
}

// FeedEdges holds the relations/edges for other nodes in the graph.
type FeedEdges struct {
	// Data holds the value of the data edge.
	Data []*Data `json:"data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DataOrErr returns the Data value or an error if the edge
// was not loaded in eager-loading.
func (e FeedEdges) DataOrErr() ([]*Data, error) {
	if e.loadedTypes[0] {
		return e.Data, nil
	}
	return nil, &NotLoadedError{edge: "data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feed) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feed.FieldID:
			values[i] = new(sql.NullInt64)
		case feed.FieldFeedName:
			values[i] = new(sql.NullString)
		case feed.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Feed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feed fields.
func (f *Feed) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feed.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case feed.FieldFeedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feed_name", values[i])
			} else if value.Valid {
				f.FeedName = value.String
			}
		case feed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryData queries the "data" edge of the Feed entity.
func (f *Feed) QueryData() *DataQuery {
	return (&FeedClient{config: f.config}).QueryData(f)
}

// Update returns a builder for updating this Feed.
// Note that you need to call Feed.Unwrap() before calling this method if this Feed
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feed) Update() *FeedUpdateOne {
	return (&FeedClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Feed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feed) Unwrap() *Feed {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feed is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feed) String() string {
	var builder strings.Builder
	builder.WriteString("Feed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("feed_name=")
	builder.WriteString(f.FeedName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Feeds is a parsable slice of Feed.
type Feeds []*Feed

func (f Feeds) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}

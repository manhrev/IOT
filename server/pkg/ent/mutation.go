// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/manhrev/IOT/server/pkg/ent/data"
	"github.com/manhrev/IOT/server/pkg/ent/feed"
	"github.com/manhrev/IOT/server/pkg/ent/group"
	"github.com/manhrev/IOT/server/pkg/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeData  = "Data"
	TypeFeed  = "Feed"
	TypeGroup = "Group"
)

// DataMutation represents an operation that mutates the Data nodes in the graph.
type DataMutation struct {
	config
	op            Op
	typ           string
	id            *int
	data          *int64
	adddata       *int64
	recorded_at   *time.Time
	clearedFields map[string]struct{}
	feed          *int
	clearedfeed   bool
	done          bool
	oldValue      func(context.Context) (*Data, error)
	predicates    []predicate.Data
}

var _ ent.Mutation = (*DataMutation)(nil)

// dataOption allows management of the mutation configuration using functional options.
type dataOption func(*DataMutation)

// newDataMutation creates new mutation for the Data entity.
func newDataMutation(c config, op Op, opts ...dataOption) *DataMutation {
	m := &DataMutation{
		config:        c,
		op:            op,
		typ:           TypeData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDataID sets the ID field of the mutation.
func withDataID(id int) dataOption {
	return func(m *DataMutation) {
		var (
			err   error
			once  sync.Once
			value *Data
		)
		m.oldValue = func(ctx context.Context) (*Data, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Data.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withData sets the old Data of the mutation.
func withData(node *Data) dataOption {
	return func(m *DataMutation) {
		m.oldValue = func(context.Context) (*Data, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Data.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetData sets the "data" field.
func (m *DataMutation) SetData(i int64) {
	m.data = &i
	m.adddata = nil
}

// Data returns the value of the "data" field in the mutation.
func (m *DataMutation) Data() (r int64, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldData(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// AddData adds i to the "data" field.
func (m *DataMutation) AddData(i int64) {
	if m.adddata != nil {
		*m.adddata += i
	} else {
		m.adddata = &i
	}
}

// AddedData returns the value that was added to the "data" field in this mutation.
func (m *DataMutation) AddedData() (r int64, exists bool) {
	v := m.adddata
	if v == nil {
		return
	}
	return *v, true
}

// ResetData resets all changes to the "data" field.
func (m *DataMutation) ResetData() {
	m.data = nil
	m.adddata = nil
}

// SetRecordedAt sets the "recorded_at" field.
func (m *DataMutation) SetRecordedAt(t time.Time) {
	m.recorded_at = &t
}

// RecordedAt returns the value of the "recorded_at" field in the mutation.
func (m *DataMutation) RecordedAt() (r time.Time, exists bool) {
	v := m.recorded_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRecordedAt returns the old "recorded_at" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldRecordedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecordedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecordedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecordedAt: %w", err)
	}
	return oldValue.RecordedAt, nil
}

// ResetRecordedAt resets all changes to the "recorded_at" field.
func (m *DataMutation) ResetRecordedAt() {
	m.recorded_at = nil
}

// SetFeedID sets the "feed" edge to the Feed entity by id.
func (m *DataMutation) SetFeedID(id int) {
	m.feed = &id
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (m *DataMutation) ClearFeed() {
	m.clearedfeed = true
}

// FeedCleared reports if the "feed" edge to the Feed entity was cleared.
func (m *DataMutation) FeedCleared() bool {
	return m.clearedfeed
}

// FeedID returns the "feed" edge ID in the mutation.
func (m *DataMutation) FeedID() (id int, exists bool) {
	if m.feed != nil {
		return *m.feed, true
	}
	return
}

// FeedIDs returns the "feed" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FeedID instead. It exists only for internal usage by the builders.
func (m *DataMutation) FeedIDs() (ids []int) {
	if id := m.feed; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFeed resets all changes to the "feed" edge.
func (m *DataMutation) ResetFeed() {
	m.feed = nil
	m.clearedfeed = false
}

// Where appends a list predicates to the DataMutation builder.
func (m *DataMutation) Where(ps ...predicate.Data) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DataMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Data).
func (m *DataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DataMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.data != nil {
		fields = append(fields, data.FieldData)
	}
	if m.recorded_at != nil {
		fields = append(fields, data.FieldRecordedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case data.FieldData:
		return m.Data()
	case data.FieldRecordedAt:
		return m.RecordedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case data.FieldData:
		return m.OldData(ctx)
	case data.FieldRecordedAt:
		return m.OldRecordedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Data field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case data.FieldData:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case data.FieldRecordedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecordedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Data field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DataMutation) AddedFields() []string {
	var fields []string
	if m.adddata != nil {
		fields = append(fields, data.FieldData)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case data.FieldData:
		return m.AddedData()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case data.FieldData:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddData(v)
		return nil
	}
	return fmt.Errorf("unknown Data numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Data nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DataMutation) ResetField(name string) error {
	switch name {
	case data.FieldData:
		m.ResetData()
		return nil
	case data.FieldRecordedAt:
		m.ResetRecordedAt()
		return nil
	}
	return fmt.Errorf("unknown Data field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DataMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.feed != nil {
		edges = append(edges, data.EdgeFeed)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case data.EdgeFeed:
		if id := m.feed; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DataMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfeed {
		edges = append(edges, data.EdgeFeed)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DataMutation) EdgeCleared(name string) bool {
	switch name {
	case data.EdgeFeed:
		return m.clearedfeed
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DataMutation) ClearEdge(name string) error {
	switch name {
	case data.EdgeFeed:
		m.ClearFeed()
		return nil
	}
	return fmt.Errorf("unknown Data unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DataMutation) ResetEdge(name string) error {
	switch name {
	case data.EdgeFeed:
		m.ResetFeed()
		return nil
	}
	return fmt.Errorf("unknown Data edge %s", name)
}

// FeedMutation represents an operation that mutates the Feed nodes in the graph.
type FeedMutation struct {
	config
	op              Op
	typ             string
	id              *int
	feed_name       *string
	data_type       *uint16
	adddata_type    *int16
	display_type    *uint16
	adddisplay_type *int16
	created_at      *time.Time
	clearedFields   map[string]struct{}
	data            map[int]struct{}
	removeddata     map[int]struct{}
	cleareddata     bool
	group           map[int]struct{}
	removedgroup    map[int]struct{}
	clearedgroup    bool
	done            bool
	oldValue        func(context.Context) (*Feed, error)
	predicates      []predicate.Feed
}

var _ ent.Mutation = (*FeedMutation)(nil)

// feedOption allows management of the mutation configuration using functional options.
type feedOption func(*FeedMutation)

// newFeedMutation creates new mutation for the Feed entity.
func newFeedMutation(c config, op Op, opts ...feedOption) *FeedMutation {
	m := &FeedMutation{
		config:        c,
		op:            op,
		typ:           TypeFeed,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedID sets the ID field of the mutation.
func withFeedID(id int) feedOption {
	return func(m *FeedMutation) {
		var (
			err   error
			once  sync.Once
			value *Feed
		)
		m.oldValue = func(ctx context.Context) (*Feed, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Feed.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeed sets the old Feed of the mutation.
func withFeed(node *Feed) feedOption {
	return func(m *FeedMutation) {
		m.oldValue = func(context.Context) (*Feed, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Feed.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFeedName sets the "feed_name" field.
func (m *FeedMutation) SetFeedName(s string) {
	m.feed_name = &s
}

// FeedName returns the value of the "feed_name" field in the mutation.
func (m *FeedMutation) FeedName() (r string, exists bool) {
	v := m.feed_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedName returns the old "feed_name" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldFeedName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeedName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeedName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedName: %w", err)
	}
	return oldValue.FeedName, nil
}

// ResetFeedName resets all changes to the "feed_name" field.
func (m *FeedMutation) ResetFeedName() {
	m.feed_name = nil
}

// SetDataType sets the "data_type" field.
func (m *FeedMutation) SetDataType(u uint16) {
	m.data_type = &u
	m.adddata_type = nil
}

// DataType returns the value of the "data_type" field in the mutation.
func (m *FeedMutation) DataType() (r uint16, exists bool) {
	v := m.data_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDataType returns the old "data_type" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldDataType(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataType: %w", err)
	}
	return oldValue.DataType, nil
}

// AddDataType adds u to the "data_type" field.
func (m *FeedMutation) AddDataType(u int16) {
	if m.adddata_type != nil {
		*m.adddata_type += u
	} else {
		m.adddata_type = &u
	}
}

// AddedDataType returns the value that was added to the "data_type" field in this mutation.
func (m *FeedMutation) AddedDataType() (r int16, exists bool) {
	v := m.adddata_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetDataType resets all changes to the "data_type" field.
func (m *FeedMutation) ResetDataType() {
	m.data_type = nil
	m.adddata_type = nil
}

// SetDisplayType sets the "display_type" field.
func (m *FeedMutation) SetDisplayType(u uint16) {
	m.display_type = &u
	m.adddisplay_type = nil
}

// DisplayType returns the value of the "display_type" field in the mutation.
func (m *FeedMutation) DisplayType() (r uint16, exists bool) {
	v := m.display_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayType returns the old "display_type" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldDisplayType(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayType: %w", err)
	}
	return oldValue.DisplayType, nil
}

// AddDisplayType adds u to the "display_type" field.
func (m *FeedMutation) AddDisplayType(u int16) {
	if m.adddisplay_type != nil {
		*m.adddisplay_type += u
	} else {
		m.adddisplay_type = &u
	}
}

// AddedDisplayType returns the value that was added to the "display_type" field in this mutation.
func (m *FeedMutation) AddedDisplayType() (r int16, exists bool) {
	v := m.adddisplay_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetDisplayType resets all changes to the "display_type" field.
func (m *FeedMutation) ResetDisplayType() {
	m.display_type = nil
	m.adddisplay_type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FeedMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FeedMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FeedMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddDatumIDs adds the "data" edge to the Data entity by ids.
func (m *FeedMutation) AddDatumIDs(ids ...int) {
	if m.data == nil {
		m.data = make(map[int]struct{})
	}
	for i := range ids {
		m.data[ids[i]] = struct{}{}
	}
}

// ClearData clears the "data" edge to the Data entity.
func (m *FeedMutation) ClearData() {
	m.cleareddata = true
}

// DataCleared reports if the "data" edge to the Data entity was cleared.
func (m *FeedMutation) DataCleared() bool {
	return m.cleareddata
}

// RemoveDatumIDs removes the "data" edge to the Data entity by IDs.
func (m *FeedMutation) RemoveDatumIDs(ids ...int) {
	if m.removeddata == nil {
		m.removeddata = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.data, ids[i])
		m.removeddata[ids[i]] = struct{}{}
	}
}

// RemovedData returns the removed IDs of the "data" edge to the Data entity.
func (m *FeedMutation) RemovedDataIDs() (ids []int) {
	for id := range m.removeddata {
		ids = append(ids, id)
	}
	return
}

// DataIDs returns the "data" edge IDs in the mutation.
func (m *FeedMutation) DataIDs() (ids []int) {
	for id := range m.data {
		ids = append(ids, id)
	}
	return
}

// ResetData resets all changes to the "data" edge.
func (m *FeedMutation) ResetData() {
	m.data = nil
	m.cleareddata = false
	m.removeddata = nil
}

// AddGroupIDs adds the "group" edge to the Group entity by ids.
func (m *FeedMutation) AddGroupIDs(ids ...int) {
	if m.group == nil {
		m.group = make(map[int]struct{})
	}
	for i := range ids {
		m.group[ids[i]] = struct{}{}
	}
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *FeedMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *FeedMutation) GroupCleared() bool {
	return m.clearedgroup
}

// RemoveGroupIDs removes the "group" edge to the Group entity by IDs.
func (m *FeedMutation) RemoveGroupIDs(ids ...int) {
	if m.removedgroup == nil {
		m.removedgroup = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.group, ids[i])
		m.removedgroup[ids[i]] = struct{}{}
	}
}

// RemovedGroup returns the removed IDs of the "group" edge to the Group entity.
func (m *FeedMutation) RemovedGroupIDs() (ids []int) {
	for id := range m.removedgroup {
		ids = append(ids, id)
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
func (m *FeedMutation) GroupIDs() (ids []int) {
	for id := range m.group {
		ids = append(ids, id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *FeedMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
	m.removedgroup = nil
}

// Where appends a list predicates to the FeedMutation builder.
func (m *FeedMutation) Where(ps ...predicate.Feed) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FeedMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Feed).
func (m *FeedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.feed_name != nil {
		fields = append(fields, feed.FieldFeedName)
	}
	if m.data_type != nil {
		fields = append(fields, feed.FieldDataType)
	}
	if m.display_type != nil {
		fields = append(fields, feed.FieldDisplayType)
	}
	if m.created_at != nil {
		fields = append(fields, feed.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feed.FieldFeedName:
		return m.FeedName()
	case feed.FieldDataType:
		return m.DataType()
	case feed.FieldDisplayType:
		return m.DisplayType()
	case feed.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feed.FieldFeedName:
		return m.OldFeedName(ctx)
	case feed.FieldDataType:
		return m.OldDataType(ctx)
	case feed.FieldDisplayType:
		return m.OldDisplayType(ctx)
	case feed.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Feed field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feed.FieldFeedName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedName(v)
		return nil
	case feed.FieldDataType:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataType(v)
		return nil
	case feed.FieldDisplayType:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayType(v)
		return nil
	case feed.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Feed field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedMutation) AddedFields() []string {
	var fields []string
	if m.adddata_type != nil {
		fields = append(fields, feed.FieldDataType)
	}
	if m.adddisplay_type != nil {
		fields = append(fields, feed.FieldDisplayType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case feed.FieldDataType:
		return m.AddedDataType()
	case feed.FieldDisplayType:
		return m.AddedDisplayType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedMutation) AddField(name string, value ent.Value) error {
	switch name {
	case feed.FieldDataType:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDataType(v)
		return nil
	case feed.FieldDisplayType:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDisplayType(v)
		return nil
	}
	return fmt.Errorf("unknown Feed numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Feed nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedMutation) ResetField(name string) error {
	switch name {
	case feed.FieldFeedName:
		m.ResetFeedName()
		return nil
	case feed.FieldDataType:
		m.ResetDataType()
		return nil
	case feed.FieldDisplayType:
		m.ResetDisplayType()
		return nil
	case feed.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Feed field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.data != nil {
		edges = append(edges, feed.EdgeData)
	}
	if m.group != nil {
		edges = append(edges, feed.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case feed.EdgeData:
		ids := make([]ent.Value, 0, len(m.data))
		for id := range m.data {
			ids = append(ids, id)
		}
		return ids
	case feed.EdgeGroup:
		ids := make([]ent.Value, 0, len(m.group))
		for id := range m.group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddata != nil {
		edges = append(edges, feed.EdgeData)
	}
	if m.removedgroup != nil {
		edges = append(edges, feed.EdgeGroup)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case feed.EdgeData:
		ids := make([]ent.Value, 0, len(m.removeddata))
		for id := range m.removeddata {
			ids = append(ids, id)
		}
		return ids
	case feed.EdgeGroup:
		ids := make([]ent.Value, 0, len(m.removedgroup))
		for id := range m.removedgroup {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddata {
		edges = append(edges, feed.EdgeData)
	}
	if m.clearedgroup {
		edges = append(edges, feed.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedMutation) EdgeCleared(name string) bool {
	switch name {
	case feed.EdgeData:
		return m.cleareddata
	case feed.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Feed unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedMutation) ResetEdge(name string) error {
	switch name {
	case feed.EdgeData:
		m.ResetData()
		return nil
	case feed.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown Feed edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op            Op
	typ           string
	id            *int
	group_name    *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	feeds         map[int]struct{}
	removedfeeds  map[int]struct{}
	clearedfeeds  bool
	done          bool
	oldValue      func(context.Context) (*Group, error)
	predicates    []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGroupName sets the "group_name" field.
func (m *GroupMutation) SetGroupName(s string) {
	m.group_name = &s
}

// GroupName returns the value of the "group_name" field in the mutation.
func (m *GroupMutation) GroupName() (r string, exists bool) {
	v := m.group_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupName returns the old "group_name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldGroupName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupName: %w", err)
	}
	return oldValue.GroupName, nil
}

// ResetGroupName resets all changes to the "group_name" field.
func (m *GroupMutation) ResetGroupName() {
	m.group_name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddFeedIDs adds the "feeds" edge to the Feed entity by ids.
func (m *GroupMutation) AddFeedIDs(ids ...int) {
	if m.feeds == nil {
		m.feeds = make(map[int]struct{})
	}
	for i := range ids {
		m.feeds[ids[i]] = struct{}{}
	}
}

// ClearFeeds clears the "feeds" edge to the Feed entity.
func (m *GroupMutation) ClearFeeds() {
	m.clearedfeeds = true
}

// FeedsCleared reports if the "feeds" edge to the Feed entity was cleared.
func (m *GroupMutation) FeedsCleared() bool {
	return m.clearedfeeds
}

// RemoveFeedIDs removes the "feeds" edge to the Feed entity by IDs.
func (m *GroupMutation) RemoveFeedIDs(ids ...int) {
	if m.removedfeeds == nil {
		m.removedfeeds = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.feeds, ids[i])
		m.removedfeeds[ids[i]] = struct{}{}
	}
}

// RemovedFeeds returns the removed IDs of the "feeds" edge to the Feed entity.
func (m *GroupMutation) RemovedFeedsIDs() (ids []int) {
	for id := range m.removedfeeds {
		ids = append(ids, id)
	}
	return
}

// FeedsIDs returns the "feeds" edge IDs in the mutation.
func (m *GroupMutation) FeedsIDs() (ids []int) {
	for id := range m.feeds {
		ids = append(ids, id)
	}
	return
}

// ResetFeeds resets all changes to the "feeds" edge.
func (m *GroupMutation) ResetFeeds() {
	m.feeds = nil
	m.clearedfeeds = false
	m.removedfeeds = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.group_name != nil {
		fields = append(fields, group.FieldGroupName)
	}
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldGroupName:
		return m.GroupName()
	case group.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldGroupName:
		return m.OldGroupName(ctx)
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldGroupName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupName(v)
		return nil
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldGroupName:
		m.ResetGroupName()
		return nil
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.feeds != nil {
		edges = append(edges, group.EdgeFeeds)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeFeeds:
		ids := make([]ent.Value, 0, len(m.feeds))
		for id := range m.feeds {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfeeds != nil {
		edges = append(edges, group.EdgeFeeds)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeFeeds:
		ids := make([]ent.Value, 0, len(m.removedfeeds))
		for id := range m.removedfeeds {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfeeds {
		edges = append(edges, group.EdgeFeeds)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeFeeds:
		return m.clearedfeeds
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeFeeds:
		m.ResetFeeds()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}
